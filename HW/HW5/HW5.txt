# Question 1
1. T(N) = 2T(N-1) + 1
    T(N-1) = 2T(N-2) + 1
    T(N-2) = 2(2T(N−2) + 1) + 1 = 2^2T(N−2) + 2 + 1
    T(N) = (2^k)T(N-k) + 2^0 + 2^1 + ... + 2^(k-1)
    
    Assume n-k = 0
    n = k
    2^nT(n-n) + 1 + 2 + ... 2^(k-1)
    2^n + 2^k - 1
    2^n + 2^n - 1
    T(n) = 2^(n+1) - 1

    Time complexity: O(2^n)

2. T(N) = 3T(N-1) + n
    T(N-1) = 3T(N-2) + n
    T(N-2) = 3T(3T(N-1) + n) + n
    T(N) = 3^2T(N−2) + 3(N−1) + N
    T(N) = 3kT(N−k) + N + (3^1(N−1) + 3^2(N−2) + ... + 3^(k−1)(N−k+1))

    Assume N - k = 0
    T(N) = T(0) + N+ (3^1(N−1) + 3^2(N−2) + ... + 3^(N−1))


3. T(N) = 9T(N/2) + n2
    a=9, b=2, f(N)=N^2
    Nlog(subscript b)​a
    log(subscript 2)9
    log9/log2 = 3.17
    Nlog(subscript b)​a = N^3.17

    Case 1:
      Time complexity: Θ(N^3.17)


4. T(N) = 100T(N/2) + n^log2cn + 1  (c is a constant)
    

5. T(N) = 4T(N/2) + n^2logn
    a=4, b=2, f(N)=n^2log⁡n
    logb​a = log2​4 = 2
    N^logb​a = N^2

    Case 3:
      Θ(n^2logn)

6. T(N) = 5T(N/2) + n^2/logn
    a=5, b=2, f(N)=n^2/log⁡n
    logb​a=log2​5
    N^logb​a = N^log2​5
    


# Question 2

yetAnotherFunc(n): 
  if n > 1: 
    for(i=0;i<10n;i++)
      doSomething;
    yetAnotherFunc(n/2);
    yetAnotherFunc(n/2);

T(n) = 2T(n/2) + 10
a = 2
b = 2
f(n) = n

n^log(2)(2) = 1
1 < n

Case 3:
    Time complexity = T(n) = Θ(n)